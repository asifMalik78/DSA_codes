#include <bits/stdc++.h>
using namespace std;
// input 
// 15 30
// ..............................
// .............#####............
// .............#...#............
// .....#########...#######......
// ....###.....######.....###....
// ...##....................##...
// ..##......................#...
// ..##.....................##...
// ..###...................##....
// ....###................###....
// ......###............###......
// ........###........###........
// ..........##########..........
// ..............................
// ...........A.P.P.L.E..........


// after output it fill all the colors inside the apple

//BEFORE

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
// . . . . . . . . . . . . . # # # # # . . . . . . . . . . . . 
// . . . . . . . . . . . . . # . . . # . . . . . . . . . . . . 
// . . . . . # # # # # # # # # . . . # # # # # # # . . . . . . 
// . . . . # # # . . . . . # # # # # # . . . . . # # # . . . . 
// . . . # # . . . . . . . . . . . . . . . . . . . . # # . . . 
// . . # # . . . . . . . . . . . . . . . . . . . . . . # . . . 
// . . # # . . . . . . . . . . . . . . . . . . . . . # # . . . 
// . . # # # . . . . . . . . . . . . . . . . . . . # # . . . . 
// . . . . # # # . . . . . . . . . . . . . . . . # # # . . . . 
// . . . . . . # # # . . . . . . . . . . . . # # # . . . . . . 
// . . . . . . . . # # # . . . . . . . . # # # . . . . . . . . 
// . . . . . . . . . . # # # # # # # # # # . . . . . . . . . . 
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
// . . . . . . . . . . . A . P . P . L . E . . . . . . . . . . 

//AFTER


// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
// . . . . . . . . . . . . . # # # # # . . . . . . . . . . . . 
// . . . . . . . . . . . . . # . . . # . . . . . . . . . . . . 
// . . . . . # # # # # # # # # . . . # # # # # # # . . . . . . 
// . . . . # # # r r r r r # # # # # # r r r r r # # # . . . . 
// . . . # # r r r r r r r r r r r r r r r r r r r r # # . . . 
// . . # # r r r r r r r r r r r r r r r r r r r r r r # . . . 
// . . # # r r r r r r r r r r r r r r r r r r r r r # # . . . 
// . . # # # r r r r r r r r r r r r r r r r r r r # # . . . . 
// . . . . # # # r r r r r r r r r r r r r r r r # # # . . . . 
// . . . . . . # # # r r r r r r r r r r r r # # # . . . . . . 
// . . . . . . . . # # # r r r r r r r r # # # . . . . . . . . 
// . . . . . . . . . . # # # # # # # # # # . . . . . . . . . . 
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
// . . . . . . . . . . . A . P . P . L . E . . . . . . . . . . 

int R , C;
int dx[] = { -1 , 0 , 1 , 0};// direction W N  S E 
int dy[] = {0 , -1 , 0 , 1};
void printMat(char mat[][100]) {
	for (int i = 0 ; i < R ; i++) {
		for (int j = 0 ; j < C ; j++) {
			cout << mat[i][j] << " ";
		}
		cout << endl;
	}

	cout << endl << endl;
}

void floodFill(char mat[][100] , int i  , int j , char ch , char color) {
	// base case of matrix boundry
	if (i <= 0 or j <= 0 or i >= R or j >= C) {
		return;
	}

	// figure boundry condition
	if (mat[i][j] != ch) {
		return;
	}
	mat[i][j] = color;
	// recursive case
	for (int k = 0 ; k < 4 ; k++) {
		floodFill(mat , i + dx[k] , j + dy[k] , ch , color);
	}
}
int main() {
	cin >> R >> C;
	char mat[100][100];
	for (int i = 0 ; i < R ; i++) {
		for (int j = 0 ; j < C ; j++) {
			cin >> mat[i][j];
		}
	}

	printMat(mat);

	floodFill(mat , 8 , 13 , '.' , 'r');

	printMat(mat);

	return 0;
}